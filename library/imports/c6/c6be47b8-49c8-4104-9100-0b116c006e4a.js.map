{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "AAAA,EAAE,CAAC,KAAK,CAAC;AACL,eAAS,EAAE,CAAC,SAAS;;AAErB,cAAU,EAAE;;AAER,kBAAU,EAAE,CAAC;KAChB;;;AAGD,UAAM,EAAE,kBAAY,EAEnB;;AAED,qBAAiB,EAAE,6BAAY;;AAE3B,YAAI,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;;AAE/C,YAAI,IAAI,GAAG,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;AACvD,eAAO,IAAI,CAAC;KACf;;AAED,YAAQ,EAAE,oBAAW;;AAEjB,YAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;;AAEzB,YAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;;AAEtB,YAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;KACvB;;AAED,UAAM,EAAE,gBAAU,EAAE,EAAE;;AAElB,YAAI,IAAI,CAAC,iBAAiB,EAAE,GAAG,IAAI,CAAC,UAAU,EAAE;;AAE5C,gBAAI,CAAC,QAAQ,EAAE,CAAC;AAChB,mBAAO;SACV;;;AAGD,YAAI,YAAY,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,GAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC;AAC9D,YAAI,UAAU,GAAG,EAAE,CAAC;AACpB,YAAI,CAAC,IAAI,CAAC,OAAO,GAAG,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,IAAI,GAAG,GAAG,UAAU,CAAA,AAAC,CAAC,CAAC;KAElF;CACJ,CAAC,CAAC",
  "file": "unknown",
  "sourcesContent": [
    "cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // 星星和主角之间的距离小于这个数值时，就会完成收集\n        pickRadius: 0\n    },\n\n    // use this for initialization\n    onLoad: function () {\n\n    },\n\n    getPlayerDistance: function () {\n        // 根据 player 节点位置判断距离\n        var playerPos = this.game.player.getPosition();\n        // 根据两点位置计算两点之间距离\n        var dist = cc.pDistance(this.node.position, playerPos);\n        return dist;\n    },\n\n    onPicked: function() {\n        // 当星星被收集时，调用 Game 脚本中的接口，生成一个新的星星\n        this.game.spawnNewStar();\n        // 调用 Game 脚本的得分方法\n        this.game.gainScore();\n        // 然后销毁当前星星节点\n        this.node.destroy();\n    },\n    // called every frame, uncomment this function to activate update callback\n    update: function (dt) {\n        // 每帧判断和主角之间的距离是否小于收集距离\n        if (this.getPlayerDistance() < this.pickRadius) {\n            // 调用收集行为\n            this.onPicked();\n            return;\n        }\n        \n        // 根据 Game 脚本中的计时器更新星星的透明度\n        var opacityRatio = 1 - this.game.timer/this.game.starDuration;\n        var minOpacity = 50;\n        this.node.opacity = minOpacity + Math.floor(opacityRatio * (255 - minOpacity));\n\n    },\n});\n"
  ]
}