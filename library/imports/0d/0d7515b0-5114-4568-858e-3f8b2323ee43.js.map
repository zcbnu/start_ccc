{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "AAAA,EAAE,CAAC,KAAK,CAAC;AACL,eAAS,EAAE,CAAC,SAAS;;AAErB,cAAU,EAAE;;;;;;;;;;;KAWX;;;AAGD,UAAM,EAAE,kBAAY;AAChB,YAAI,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;AACrD,iBAAS,CAAC,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;KAC/C;;AAED,eAAW,EAAE,uBAAY;AACrB,YAAI,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;;;AAG3C,YAAI,CAAC,IAAI,EAAE,CAAC;KACf;;AAED,cAAU,EAAE,sBAAW;;;;AAEnB,YAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;AAChD,aAAK,CAAC,YAAY,CAAE,CAAC,EAAE,UAAU,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;;AAE7C,aAAK,CAAC,cAAc,CAAC,YAAI;;;AAGrB,kBAAK,KAAK,GAAG,MAAK,KAAK,IAAI,CAAC,CAAC;AAC7B,kBAAK,KAAK,GAAG,MAAK,KAAK,GAAG,CAAC,CAAC;AAC5B,mBAAO,CAAC,GAAG,CAAC,UAAU,GAAG,MAAK,KAAK,CAAC,CAAC;AACrC,gBAAI,MAAK,KAAK,KAAK,OAAO,EAAE,MAAK,KAAK,GAAG,QAAQ,CAAC;SACrD,CAAC,CAAC;AACH,YAAI,CAAC,KAAK,GAAG,OAAO,CAAC;KACxB;;AAED,eAAW,EAAE,uBAAW;AACpB,YAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;AAChD,aAAK,CAAC,YAAY,CAAE,CAAC,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;KACzC;;;AAGD,UAAM,EAAE,gBAAU,EAAE,EAAE;;AAElB,YAAI,IAAI,CAAC,KAAK,KAAK,QAAQ,EAC3B;AACI,gBAAI,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;AACtE,gBAAI,CAAC,KAAK,GAAG,MAAM,CAAC;SACvB;;;;;;;;;;;;KAaJ;CACJ,CAAC,CAAC",
  "file": "unknown",
  "sourcesContent": [
    "cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function () {\n        var animation = this.node.getComponent(cc.Animation);\n        animation.on('stop', this.onStopMove, this);\n    },\n    \n    attackEnemy: function () {\n        var anim = this.getComponent(cc.Animation);\n\n        // 如果没有指定播放哪个动画，并且有设置 defaultClip 的话，则会播放 defaultClip 动画\n        anim.play();\n    },\n    \n    onStopMove: function() {\n        // this.node.setScale(2);\n        var spine = this.node.getComponent(sp.Skeleton);\n        spine.setAnimation (0, \"active01\", false, 0);\n        // spine.setEndListener(()=>{this.node.getComponent(sp.Skeleton).setAnimation(0, \"stand\", true); });\n        spine.setEndListener(()=>{\n            // var spined = this.node.getComponent(sp.Skeleton);\n            // spined.setAnimation(0, \"stand\", true);\n            this.count = this.count || 0;\n            this.count = this.count + 1;\n            console.log(\"stand!!!\" + this.count);\n            if (this.state === \"start\") this.state = \"finish\";\n        });\n        this.state = \"start\";\n    },\n    \n    onAttackEnd: function() {\n        var spine = this.node.getComponent(sp.Skeleton);\n        spine.setAnimation (0, \"stand\", true);  \n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function (dt) {\n        \n        if (this.state === \"finish\")\n        {\n            this.node.getComponent(sp.Skeleton).setAnimation(0, \"stand\", true, 0);\n            this.state = \"stop\";\n        }\n        // 每帧判断和主角之间的距离是否小于收集距离\n        // if (this.getPlayerDistance() < this.pickRadius) {\n        //     // 调用收集行为\n        //     this.attackEnemy();\n        //     return;\n        // }\n        \n        // 根据 Game 脚本中的计时器更新星星的透明度\n        // var opacityRatio = 1 - this.game.timer/this.game.starDuration;\n        // var minOpacity = 50;\n        // this.node.opacity = minOpacity + Math.floor(opacityRatio * (255 - minOpacity));\n\n    },\n});\n"
  ]
}