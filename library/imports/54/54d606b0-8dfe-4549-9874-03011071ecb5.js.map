{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [],
  "mappings": "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",
  "file": "unknown",
  "sourcesContent": [
    "cc.Class({\n    extends: cc.Component,\n\n// Game.js\n    properties: {\n        // 这个属性引用了星星预制资源\n        starPrefab: {\n            default: null,\n            type: cc.Prefab\n        },\n        // 星星产生后消失时间的随机范围\n        maxStarDuration: 0,\n        minStarDuration: 0,\n        // 地面节点，用于确定星星生成的高度\n        ground: {\n            default: null,\n            type: cc.Node\n        },\n        // player 节点，用于获取主角弹跳的高度，和控制主角行动开关\n        player: {\n            default: null,\n            type: cc.Node\n        },\n        \n        minion: {\n            default: null,\n            type: cc.Node\n        },\n        \n        scoreDisplay: {\n            default: null,\n            type: cc.Label\n        },\n        // 得分音效资源\n        scoreAudio: {\n            default: null,\n            url: cc.AudioClip\n        },\n    },\n\n    // use this for initialization\n// Game.js\n    onLoad: function () {\n        // 获取地平面的 y 轴坐标\n        this.groundY = this.ground.y + this.ground.height/2;\n        // 初始化计时器\n        this.timer = 0;\n        this.starDuration = 0;\n        // 生成一个新的星星\n        this.spawnNewStar();\n        // 初始化计分\n        this.score = 0;\n    },\n\n    spawnNewStar: function() {\n        // 使用给定的模板在场景中生成一个新节点\n        var newStar = cc.instantiate(this.starPrefab);\n        // 将新增的节点添加到 Canvas 节点下面\n        this.node.addChild(newStar);\n        // 为星星设置一个随机位置\n        newStar.setPosition(this.getNewStarPosition());\n        newStar.getComponent('skeleton').game = this;\n        // 重置计时器，根据消失时间范围随机取一个值\n        this.starDuration = this.minStarDuration + cc.random0To1() * (this.maxStarDuration - this.minStarDuration);\n        this.timer = 0;\n    },\n\n    getNewStarPosition: function () {\n        var randX = 0;\n        // 根据地平面位置和主角跳跃高度，随机得到一个星星的 y 坐标\n        var randY = this.groundY + cc.random0To1() * this.player.getComponent('Player').jumpHeight + 50;\n        // 根据屏幕宽度，随机得到一个星星 x 坐标\n        var maxX = this.node.width/2;\n        randX = cc.randomMinus1To1() * maxX;\n        // 返回星星坐标\n        return cc.p(randX, randY);\n    },\n\n    gainScore: function () {\n        this.score += 1;\n        // 更新 scoreDisplay Label 的文字\n        this.scoreDisplay.string = 'Score: ' + this.score.toString();\n        // 播放得分音效\n        cc.audioEngine.playEffect(this.scoreAudio, false);\n    },\n    // called every frame, uncomment this function to activate update callback\n    update: function (dt) {\n        // 每帧更新计时器，超过限度还没有生成新的星星\n        // 就会调用游戏失败逻辑\n        if (this.timer > this.starDuration) {\n            this.gameOver();\n            return;\n        }\n        this.timer += dt;\n    },\n    \n    gameOver: function () {\n        this.player.stopAllActions(); //停止 player 节点的跳跃动作\n        cc.director.loadScene('game');\n    }\n});\n"
  ]
}